embed
{{ coq
Import ListNotations.
Section RegExp.
Variable char : Type.
}}
metavar c ::=
          {{ lex alphanum }}
          {{ com character }}
          {{ coq char }}
          {{ hol char }}
          {{ coq-universe Type }}
grammar
s :: s_ ::=
  {{ com string }}
  {{ coq list char }}
  {{ hol char list }}
  {{ coq-universe Type }}
  | e :: M :: empty
    {{ coq [] }}
    {{ hol [] }}
    {{ tex \epsilon }}
  | c :: M :: char
    {{ coq ([[c]] :: []) }}
    {{ hol ([[c]] :: []) }}
  | s s' :: M :: concat
    {{ coq ([[s]] ++ [[s']]) }}
    {{ hol ([[s]] ++ [[s']]) }}

r :: r_ ::=
  {{ com regexp }}
  {{ coq-universe Type }}
  | 0 :: :: zero
  | 1 :: :: unit
  | c :: :: char
  | r + r' :: :: plus
  | r r' :: :: times
  | r * :: :: star
    {{ tex [[r]]^* }}

terminals :: terminals_ ::=
	  | in :: :: in {{ tex \in }}
	  | L :: :: L {{ tex \mathit{L} }}	

formula :: formula_ ::=
	| judgement :: :: judgement

defns
  regexp_ins :: '' ::=

defn
 s in L ( r ) :: :: s_in_regexp_lang :: s_in_regexp_lang_
 {{ com string in regexp language }} by

 --------- :: unit
 e in L(1)

 ---------- :: char
 c in L(c)

 s in L(r1)
 ------------- :: plus_1
 s in L(r1+r2)

 s in L(r2)
 ------------- :: plus_2
 s in L(r1+r2)

 s in L(r1)
 s' in L(r2)
 ---------------- :: times
 s s' in L(r1 r2)

 ---------- :: star_1
 e in L(r*)

 s in L(r)
 s' in L(r*)
 ------------- :: star_2
 s s' in L(r*)

defns
  regexp_ins_c :: '' ::=

defn
 s in L ( r ; c ) :: :: s_in_regexp_c_lang :: s_in_regexp_c_lang_
 {{ com string in regexp c language }} by 

 c s in L(r)
 ----------- :: cs
 s in L(r;c)

embed
{{ coq
End RegExp.
}}
